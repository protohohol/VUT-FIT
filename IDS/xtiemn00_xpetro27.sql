--- Authors: xtiemn00, xperto27
--- IDS 2022/2023

----------   DROP TABLES    ----------

DROP TABLE hlavolam CASCADE CONSTRAINTS;
DROP TABLE uzivatel CASCADE CONSTRAINTS;
DROP TABLE sbirka CASCADE CONSTRAINTS;
DROP TABLE reseni CASCADE CONSTRAINTS;
DROP TABLE puzzle CASCADE CONSTRAINTS;
DROP TABLE hadanka CASCADE CONSTRAINTS;
DROP TABLE pujcil_si CASCADE CONSTRAINTS;
DROP TABLE prisel_na CASCADE CONSTRAINTS;
DROP TABLE je_soucasti CASCADE CONSTRAINTS;

----------   DROP SEQUENCES    ----------

DROP SEQUENCE hlavolam_nazev_seq;
DROP SEQUENCE sbirka_nazev_seq;

----------   MATERIALIZED VIEW    ----------

DROP MATERIALIZED VIEW pocet_obtiznosti;

--------    CREATE TABLES    ---------

CREATE TABLE hlavolam (
    id_hlavolamu NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_uzivatele NUMBER NOT NULL, --foreign--
    nazev VARCHAR(64),
    zeme_puvodu VARCHAR(3) NOT NULL,
    popis VARCHAR(128),
    obtiznost VARCHAR(64) NOT NULL
);

CREATE TABLE uzivatel (
    id_uzivatele NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    jmeno VARCHAR(32) NOT NULL,
    prijmeni VARCHAR(32) NOT NULL,
    email VARCHAR(255) NOT NULL CHECK(REGEXP_LIKE(email, '^[a-z]+[a-z0-9\.]*@[a-z0-9\.-]+\.[a-z]{2,}$', 'i')),
    telefonni_kontakt VARCHAR(32) NOT NULL
);

CREATE TABLE sbirka (
    cislo_sbirky NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_uzivatele NUMBER NOT NULL, --foreign--
    nazev VARCHAR(64),
    created_at  DATE
);

CREATE TABLE reseni ( --weak--
    cislo_reseni NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_hlavolamu NUMBER NOT NULL, --foreign--
    popis VARCHAR(128)
);
--for generalization was used first method--
CREATE TABLE puzzle ( --generalization--
    id_hlavolamu NUMBER PRIMARY KEY, --foreign--
    pocet_dilku INT NOT NULL CHECK (pocet_dilku > 0),
    tema VARCHAR(32) NOT NULL,
    nahled VARCHAR(32) NOT NULL,
    autor VARCHAR(32) NOT NULL
);

CREATE TABLE hadanka ( --generalization--
    id_hlavolamu NUMBER PRIMARY KEY, --foreign--
    typ VARCHAR(32) NOT NULL,
    jazyk VARCHAR(32) NOT NULL,
    rekord INT NOT NULL,
    lingvisticka_narocnost INT NOT NULL

    CHECK (lingvisticka_narocnost >= 1 AND lingvisticka_narocnost <= 10)
);

CREATE TABLE pujcil_si (
    id_hlavolamu NUMBER NOT NULL, --foreign--
    id_uzivatele NUMBER NOT NULL, --foreign--
    od DATE,
    do DATE
);

CREATE TABLE prisel_na (
    id_uzivatele NUMBER NOT NULL, --foreign--
    cislo_reseni NUMBER NOT NULL  --foreign--
);

CREATE TABLE je_soucasti (
    id_hlavolamu NUMBER NOT NULL, --foreign--
    cislo_sbirky NUMBER NOT NULL  --foreign--
);

-----------    SET KEYS    -----------

--- COMPOSITE KEYS ---
ALTER TABLE pujcil_si ADD CONSTRAINT pk_pujcil_si PRIMARY KEY (id_hlavolamu, id_uzivatele);
ALTER TABLE prisel_na ADD CONSTRAINT pk_prisel_na PRIMARY KEY (id_uzivatele, cislo_reseni);
ALTER TABLE je_soucasti ADD CONSTRAINT pk_je_soucasti PRIMARY KEY (id_hlavolamu, cislo_sbirky);

--- FOREIGN ---
ALTER TABLE hlavolam ADD CONSTRAINT fk_hl_id_uzivatele FOREIGN KEY (id_uzivatele) REFERENCES uzivatel(id_uzivatele);
ALTER TABLE sbirka ADD CONSTRAINT fk_sb_id_uzivatele FOREIGN KEY (id_uzivatele) REFERENCES uzivatel(id_uzivatele);
ALTER TABLE reseni ADD CONSTRAINT fk_re_id_hlavolamu FOREIGN KEY (id_hlavolamu) REFERENCES hlavolam(id_hlavolamu);
ALTER TABLE puzzle ADD CONSTRAINT fk_pu_id_hlavolamu FOREIGN KEY (id_hlavolamu) REFERENCES hlavolam(id_hlavolamu);
ALTER TABLE hadanka ADD CONSTRAINT fk_ha_id_hlavolamu FOREIGN KEY (id_hlavolamu) REFERENCES hlavolam(id_hlavolamu);

---------    TRIGGER    ----------

CREATE OR REPLACE TRIGGER pujcil_si_datum_tr
	BEFORE INSERT OR UPDATE ON pujcil_si
	FOR EACH ROW
BEGIN
	IF :new.od IS NULL
	THEN
        :new.od := TRUNC(SYSDATE, 'DDD');
	END IF;

	IF :new.do IS NULL
	THEN
        :new.do := :new.od + 3;
    END IF;

	IF :new.od < TRUNC(SYSDATE, 'DDD') OR
	   :new.do < TRUNC(SYSDATE, 'DDD') OR
	   :new.od > :new.do
	THEN
		Raise_Application_Error(-20001, 'Chybne datum!');
	END IF;
END;

CREATE SEQUENCE hlavolam_nazev_seq;
CREATE OR REPLACE TRIGGER hlavolam_nazev_tr
	BEFORE INSERT ON hlavolam
	FOR EACH ROW
BEGIN
	IF :new.nazev IS NULL
    THEN
	    :new.nazev := CONCAT('Hlavolam_auto_', hlavolam_nazev_seq.nextval);
    END IF;
END;

CREATE SEQUENCE sbirka_nazev_seq;
CREATE OR REPLACE TRIGGER sbirka_tr
	BEFORE INSERT ON sbirka
	FOR EACH ROW
BEGIN
    IF :new.created_at IS NULL
	THEN
        :new.created_at := TRUNC(SYSDATE, 'DDD');
	END IF;

	IF :new.nazev IS NULL
    THEN
	    :new.nazev := CONCAT('Sbirka_auto_', sbirka_nazev_seq.nextval);
    END IF;
END;

---------    PROCEDURES    ----------

CREATE OR REPLACE PROCEDURE zobrazit_hlavolamy IS
    CURSOR c_hlavolamy IS SELECT * FROM hlavolam;
    r_hlavolamy c_hlavolamy%ROWTYPE;
BEGIN
    OPEN c_hlavolamy;
    LOOP
        FETCH c_hlavolamy INTO r_hlavolamy;
        EXIT WHEN c_hlavolamy%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(r_hlavolamy.nazev || ', ' || r_hlavolamy.obtiznost);
      END LOOP;
    CLOSE c_hlavolamy;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;


CREATE OR REPLACE PROCEDURE zmenit_obtiznost(h_obtiznost IN hlavolam.obtiznost%TYPE, p_obtiznost IN hlavolam.obtiznost%TYPE) IS
  CURSOR c_hlavolamy IS SELECT * FROM hlavolam WHERE obtiznost = h_obtiznost FOR UPDATE;
  r_hlavolamy c_hlavolamy%ROWTYPE;
BEGIN
  OPEN c_hlavolamy;
  LOOP
    FETCH c_hlavolamy INTO r_hlavolamy;
    EXIT WHEN c_hlavolamy%NOTFOUND;
    UPDATE hlavolam SET obtiznost = p_obtiznost WHERE CURRENT OF c_hlavolamy;
  END LOOP;
  CLOSE c_hlavolamy;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;


---------    FILL TABLES    ----------

INSERT INTO uzivatel VALUES ('1000', 'Vsevolod', 'Petr', 'test@vutbr.cz', '+420111111111');
INSERT INTO uzivatel VALUES ('1001', 'Ilya', 'Hols', 'test1@vutbr.cz', '+420222222222');
INSERT INTO uzivatel VALUES ('1002', 'Ilya', 'Novak', 'test3@vutbr.cz', '+420333333333');
INSERT INTO uzivatel VALUES ('1003', 'Horan', 'Bombzikov', 'lalalend@gmail.com', '+420114231111');
INSERT INTO uzivatel VALUES ('1004', 'Moshad', 'Kolikov', 'uoqwepads@gmail.com', '+420124231111');
INSERT INTO uzivatel VALUES ('1005', 'Kladoman', 'Raskosov', 'bombardio@gmail.com', '+420333333333');
INSERT INTO uzivatel VALUES ('1006', 'Denis', 'Popkinov', 'popochan@gmail.com', '+420115234111');
INSERT INTO uzivatel VALUES ('1007', 'Zhandarm', 'Mikserov', 'kozlsdlas@gmail.com', '+420222342222');
INSERT INTO uzivatel VALUES ('1008', 'Jolandrio', 'Murlandio', 'jojojojradlo@gmail.com', '+420341233333');


INSERT INTO hlavolam VALUES ('0000', '1000', '', 'CZE', 'interesting brain teaser for beginners', 'very easy');
INSERT INTO hlavolam VALUES ('0001', '1001', 'SuperMegaPuzzle', 'CZE', 'very interesting brain teaser for beginners', 'easy');
INSERT INTO hlavolam VALUES ('0002', '1000', 'MegaPuzzle', 'GER', 'not interesting brain teaser for beginners', 'hard');
INSERT INTO hlavolam VALUES ('0003', '1002', 'JustPuzzle', 'ENG', 'for not so smart people', 'very easy');
INSERT INTO hlavolam VALUES ('0004', '1002', 'BrainDestroyer', 'ENG', 'for geniuses only', 'impossible');
INSERT INTO hlavolam VALUES ('0005', '1002', 'FunnyRiddle', 'SPA', 'for whole family', 'easy');
INSERT INTO hlavolam VALUES ('0006', '1001', 'JustRiddle', 'GER', 'some text', 'hard');
INSERT INTO hlavolam VALUES ('0007', '1000', '', 'ENG', 'something you wont solve', 'impossible');
INSERT INTO hlavolam VALUES ('0008', '1000', 'ChillGame', 'CZE', 'some more text', 'very easy');


INSERT INTO sbirka VALUES ('2000', '1000', '', TO_DATE('', 'DD.MM.YYYY'));
INSERT INTO sbirka VALUES ('2001', '1002', 'collect', TO_DATE('10.01.2021', 'DD.MM.YYYY'));
INSERT INTO sbirka VALUES ('2002', '1002', 'old_collect', TO_DATE('10.01.2019', 'DD.MM.YYYY'));

INSERT INTO reseni VALUES ('3000', '0000', 'finally solved it!');
INSERT INTO reseni VALUES ('3001', '0000', 'finally solved it once more!');
INSERT INTO reseni VALUES ('3002', '0003', 'did this in 2 seconds');
INSERT INTO reseni VALUES ('3003', '0000', 'no comments');
INSERT INTO reseni VALUES ('3004', '0000', 'no comments');
INSERT INTO reseni VALUES ('3005', '0003', 'no comments');
INSERT INTO reseni VALUES ('3006', '0004', 'no comments');
INSERT INTO reseni VALUES ('3007', '0000', 'no comments');

INSERT INTO puzzle VALUES ('0001', '100', 'City', 'acdf', 'Chad');
INSERT INTO puzzle VALUES ('0004', '55', 'Person', 'bbbb', 'unknown');

INSERT INTO hadanka VALUES ('0002', 'abc', 'ger', '60', '5');
INSERT INTO hadanka VALUES ('0003', 'acdc', 'eng', '2', '1');
INSERT INTO hadanka VALUES ('0005', 'ddd', 'cze', '55', '2');
INSERT INTO hadanka VALUES ('0006', 'lll', 'eng', '10', '3');
INSERT INTO hadanka VALUES ('0007', 'www', 'ger', '440', '5');
INSERT INTO hadanka VALUES ('0008', 'fit', 'eng', '180', '1');

INSERT INTO pujcil_si VALUES ('0001', '1000', TO_DATE('15.05.2023', 'DD.MM.YYYY'), TO_DATE('', 'DD.MM.YYYY'));
INSERT INTO pujcil_si VALUES ('0002', '1001', TO_DATE('', 'DD.MM.YYYY'), TO_DATE('', 'DD.MM.YYYY'));
INSERT INTO pujcil_si VALUES ('0003', '1002', TO_DATE('', 'DD.MM.YYYY'), TO_DATE('15.09.2023', 'DD.MM.YYYY'));

INSERT INTO prisel_na VALUES ('1000', '3000');
INSERT INTO prisel_na VALUES ('1000', '3001');
INSERT INTO prisel_na VALUES ('1002', '3002');

INSERT INTO je_soucasti VALUES ('0000', '2000');
INSERT INTO je_soucasti VALUES ('0003', '2002');
INSERT INTO je_soucasti VALUES ('0004', '2002');

---------    TRIGGER DEMONSTRATION    ----------

SELECT id_hlavolamu, id_uzivatele, nazev
FROM hlavolam
ORDER BY id_hlavolamu;

SELECT cislo_sbirky, id_uzivatele, nazev, created_at
FROM sbirka
ORDER BY cislo_sbirky;

SELECT id_hlavolamu, id_uzivatele, od, do
FROM pujcil_si
ORDER BY id_hlavolamu;

CALL zobrazit_hlavolamy();
CALL zmenit_obtiznost('medium', 'easy');

---------    EXPLAIN PLAN    ----------

EXPLAIN PLAN FOR
SELECT SUBSTR(u.email, INSTR(u.email, '@') + 1) AS email_domain,
       COUNT(DISTINCT p.id_hlavolamu) + COUNT(DISTINCT h.id_hlavolamu) AS total_submissions
FROM uzivatel u
LEFT JOIN hlavolam h ON u.id_uzivatele = h.id_uzivatele
LEFT JOIN puzzle p ON h.id_hlavolamu = p.id_hlavolamu
LEFT JOIN hadanka ha ON h.id_hlavolamu = ha.id_hlavolamu
GROUP BY SUBSTR(u.email, INSTR(u.email, '@') + 1);

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY());


CREATE INDEX email_index ON uzivatel (email);

EXPLAIN PLAN FOR
SELECT SUBSTR(u.email, INSTR(u.email, '@') + 1) AS email_domain,
       COUNT(DISTINCT p.id_hlavolamu) + COUNT(DISTINCT h.id_hlavolamu) AS total_submissions
FROM uzivatel u
LEFT JOIN hlavolam h ON u.id_uzivatele = h.id_uzivatele
LEFT JOIN puzzle p ON h.id_hlavolamu = p.id_hlavolamu
LEFT JOIN hadanka ha ON h.id_hlavolamu = ha.id_hlavolamu
GROUP BY SUBSTR(u.email, INSTR(u.email, '@') + 1);

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY());

DROP INDEX email_index;
---------    MATERIALIZED VIEW    ----------

CREATE MATERIALIZED VIEW pocet_obtiznosti
AS
SELECT obtiznost, COUNT(*) AS pocet_hlavolamu
FROM hlavolam
GROUP BY obtiznost;

SELECT * FROM pocet_obtiznosti;

INSERT INTO hlavolam VALUES ('0009', '1001', 'Tetraedroidoo', 'UKR', 'do not even try', 'impossible');
COMMIT;

SELECT * FROM pocet_obtiznosti;

---------    PRIVILEGES    ----------

GRANT ALL ON hlavolam TO XPETRO27;
GRANT ALL ON uzivatel TO XPETRO27;
GRANT ALL ON reseni TO XPETRO27;
GRANT ALL ON puzzle TO XPETRO27;
GRANT ALL ON sbirka TO XPETRO27;
GRANT ALL ON prisel_na TO XPETRO27;
GRANT ALL ON hadanka TO XPETRO27;
GRANT ALL ON je_soucasti TO XPETRO27;
GRANT ALL ON pujcil_si TO XPETRO27;
GRANT ALL ON pocet_obtiznosti TO XPETRO27;

GRANT EXECUTE ON zobrazit_hlavolamy TO XPETRO27;
GRANT EXECUTE ON zmenit_obtiznost TO XPETRO27;

---------    SELECT    ----------
--This select counts the amount of solution to every and prints out its difficulty based on solution amount
WITH solved_puzzles AS (
  SELECT id_hlavolamu, COUNT(*) AS solved_count
  FROM reseni
  GROUP BY id_hlavolamu
), puzzle_difficulty AS (
  SELECT hlavolam.*,
         CASE
           WHEN solved_puzzles.solved_count < 5 AND solved_puzzles.solved_count > 0  THEN 'few solutions (hard)'
           WHEN solved_puzzles.solved_count >= 5 THEN 'many solutions (easy)'
           ELSE 'no solutions (impossible)'
         END AS obtiznost_rating
  FROM hlavolam LEFT JOIN solved_puzzles ON hlavolam.id_hlavolamu = solved_puzzles.id_hlavolamu
)
SELECT puzzle_difficulty.nazev, puzzle_difficulty.obtiznost_rating, uzivatel.jmeno, uzivatel.prijmeni
FROM puzzle_difficulty JOIN uzivatel ON puzzle_difficulty.id_uzivatele = uzivatel.id_uzivatele;